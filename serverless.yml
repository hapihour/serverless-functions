service: hh-user

functions:
  testEvent:
    handler: src/handlers/testEvent.handler
    events:
      - http:
          path: /test-event
          method: get
          authorizer: ${self:custom.firebaseAuthorizer}

  insertUserToDynamo:
    handler: src/handlers/insertUserToDynamo.handler
    events:
      - externalSNS: 'UserCreated'
    environment:
      USERS_TABLE: ${self:custom.usersTableName}

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2 # Sydney
  memorySize: 192
  stage: ${opt:stage, 'dev'}
  apiGateway:
    restApiId:
      'Fn::ImportValue': hh-${self:provider.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': hh-${self:provider.stage}-ApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ":"
          - - arn
            - aws
            - dynamodb
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - table/${self:custom.usersTableName}

custom:
  usersTableName: hh-${self:provider.stage}-users
  firebaseAuthorizer:
    type: CUSTOM
    authorizerId:
      Fn::ImportValue: hh-${self:provider.stage}-FirebaseAuthorizer
  dev:
    region: "ap-southeast-2"
  prod:
    region: "ap-southeast-2"
  snsArn:
    Fn::Join:
      - ':'
      - - 'arn:aws:sns'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-external-sns-events

resources:
  Resources:
    StoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
