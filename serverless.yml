service: hh-user

plugins:
  - serverless-plugin-typescript
  - serverless-pseudo-parameters

functions:
  testEvent:
    handler: src/handlers/testEvent.handler
    events:
      - http:
          path: /test-event
          method: get
          authorizer: ${self:custom.firebaseAuthorizer}

  getUserEvents:
    handler: src/handlers/getUserEvents.handler
    events:
      - http:
          path: /events
          method: get
          authorizer: ${self:custom.firebaseAuthorizer}

  createEvent:
    handler: src/handlers/createEvent.handler
    events:
      - http:
          path: /events
          method: post
          authorizer: ${self:custom.firebaseAuthorizer}
    environment:
      TABLE_NAME: ${self:custom.tableName}
      GOOGLE_MAPS_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/GOOGLE_MAPS_API_KEY~true}

  insertUserToDynamo:
    handler: src/handlers/insertUserToDynamo.handler
    events:
      - sns: ${self:provider.stage}-UserCreated

  insertUserToAlgolia:
    handler: src/handlers/insertUserToAlgolia.handler
    events:
      - sns: ${self:provider.stage}-UserCreated
    environment:
      ALGOLIA_USER_INDEX: ${ssm:/${self:service}/${self:provider.stage}/ALGOLIA_USER_INDEX}
      ALGOLIA_APP_ID: ${ssm:/${self:service}/${self:provider.stage}/ALGOLIA_APP_ID}
      ALGOLIA_TOKEN: ${ssm:/${self:service}/${self:provider.stage}/ALGOLIA_TOKEN~true}

  insertEventToAlgolia:
    handler: src/handlers/insertEventToAlgolia.handler
    events:
      - sns: ${self:provider.stage}-EventCreated
    environment:
      ALGOLIA_EVENTS_INDEX: ${ssm:/${self:service}/${self:provider.stage}/ALGOLIA_EVENTS_INDEX}
      ALGOLIA_APP_ID: ${ssm:/${self:service}/${self:provider.stage}/ALGOLIA_APP_ID}
      ALGOLIA_TOKEN: ${ssm:/${self:service}/${self:provider.stage}/ALGOLIA_TOKEN~true}

provider:
  name: aws
  profile: jponcProfile
  runtime: nodejs10.x
  region: ap-southeast-2 # Sydney
  memorySize: 192
  stage: ${opt:stage, 'dev'}
  apiGateway:
    restApiId:
      "Fn::ImportValue": hh-${self:provider.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      "Fn::ImportValue": hh-${self:provider.stage}-ApiGatewayRestApiRootResourceId
  environment:
    TABLE_NAME: ${self:custom.tableName}
    SNS_PREFIX: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        Fn::Join:
          - ":"
          - - arn
            - aws
            - dynamodb
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - table/${self:custom.tableName}

    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sns:*"

custom:
  tableName: hh-${self:provider.stage}-table
  firebaseAuthorizer:
    type: CUSTOM
    authorizerId:
      Fn::ImportValue: hh-${self:provider.stage}-FirebaseAuthorizer
  dev:
    region: "ap-southeast-2"
  prod:
    region: "ap-southeast-2"
  snsArn:
    Fn::Join:
      - ":"
      - - "arn:aws:sns"
        - Ref: "AWS::Region"
        - Ref: "AWS::AccountId"

resources:
  Resources:
    StoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
